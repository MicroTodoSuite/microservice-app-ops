name: Infrastructure Pipeline

# ===============================================================================
# CONFIGURACI√ìN B√ÅSICA DEL PIPELINE DE INFRAESTRUCTURA
# ===============================================================================

# Este pipeline se ejecutar√° autom√°ticamente cuando:
# - Se realicen cambios en la rama 'main'
# - Y los cambios afecten archivos dentro de los directorios 'base-infrastructure/*', 'container-apps/'
on:
  pull_request:
    branches:
      - main
    paths:
      - 'base-infrastructure/**'
      - 'container-apps/**'
  workflow_run:
    workflows: ['Setup Terraform Backend']
    types:
      - completed # Se ejecuta cuando se completa el pipeline del backend

# Variables reutilizables a lo largo del workflow
env:
  INFRASTRUCTURE_TERRAFORM_DIR: 'base-infrastructure' # Carpeta donde est√°n los archivos .tf de la base de la infraestructrua
  CONTAINERS_TERRAFORM_DIR: 'container-apps' # Carpeta donde est√°n los archivos .tf de la base de la infraestructrua
  AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS_COLONIA }} # Credenciales de Azure configuradas en GitHub Secrets
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID_COLONIA }} # ID de la suscripci√≥n de Azure configuradas en GitHub Secrets
  GITHUB_REPOSITORY: 'MicroTodoSuite/microservice-app-ops' # Repositorio de operaciones
  GH_TOKEN: ${{ secrets.GH_TOKEN }} # Github token con los permisos necesarios

jobs:
  # ===============================================================================
  # ETAPA 1: VALIDACI√ìN DE INFRAESTRUCTURA BASE
  # ===============================================================================
  validate_base:
    name: '1. Validaci√≥n de Infraestructura'
    runs-on: ubuntu-latest

    steps:
      # Paso 1: Checkout del c√≥digo
      - name: Checkout repository
        uses: actions/checkout@v4

      # Paso 2: Configurar Azure CLI
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ env.AZURE_CREDENTIALS }}

      # Paso 3: Instalar Terraform
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      # Paso 4: Ejecutar script para configurar secrets (tu requerimiento)
      - name: Setup Azure Secrets
        run: |
          echo "‚öôÔ∏è Configurando secrets de Azure..."
          chmod +x ./scripts/setup-azure-secrets.sh
          ./scripts/setup-azure-secrets.sh

      # Paso 5: Inicializar Terraform con backend
      - name: Terraform Init
        run: |
          terraform init \
          -backend-config="resource_group_name=${{ secrets.TF_STATE_RESOURCE_GROUP }}" \
          -backend-config="storage_account_name=${{ secrets.TF_STATE_STORAGE_ACCOUNT }}" \
          -backend-config="container_name=${{ secrets.TF_STATE_CONTAINER }}" \
          -backend-config="key=${{ secrets.TF_STATE_KEY }}" \
          -backend-config="access_key=${{ secrets.TF_STATE_ACCESS_KEY }}"
        working-directory: ${{ env.INFRASTRUCTURE_TERRAFORM_DIR }}

      # Paso 6: Validar la sintaxis de los archivos Terraform
      - name: Terraform Validate
        run: terraform validate
        working-directory: ${{ env.INFRASTRUCTURE_TERRAFORM_DIR }}

      # Paso 7: Generar el plan de ejecuci√≥n
      # - Muestra los cambios que se aplicar√≠an sin ejecutarlos
      # - Guarda el plan como archivo binario `tfplan`
      - name: Terraform Plan
        run: terraform plan -out=tfplan -var="subscription_id=${{ env.AZURE_SUBSCRIPTION_ID }}"
        working-directory: ${{ env.INFRASTRUCTURE_TERRAFORM_DIR }}

      # Paso 8: Subir el archivo tfplan como artefacto
      # - Esto permite usar el mismo plan en la siguiente etapa
      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: ${{ env.INFRASTRUCTURE_TERRAFORM_DIR }}/tfplan

  # ===============================================================================
  # ETAPA 2: APLICACI√ìN DE CAMBIOS INFRAESTRUCTURA BASE EN AZURE
  # ===============================================================================
  apply_base:
    name: '2. Aplicar Infraestructura'
    needs: validate_base
    if: success()
    runs-on: ubuntu-latest

    steps:
      # Paso 1: Checkout del c√≥digo
      - name: Checkout repository
        uses: actions/checkout@v4

      # Paso 2: Configurar Azure CLI
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ env.AZURE_CREDENTIALS }}

      # Paso 3: Instalar Terraform
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      # Paso 4: Descargar el artefacto tfplan generado anteriormente
      - name: Download Terraform Plan
        uses: actions/download-artifact@v4
        with:
          name: terraform-plan
          path: ${{ env.INFRASTRUCTURE_TERRAFORM_DIR }}

      # Paso 5: Inicializar Terraform en esta etapa tambi√©n con backend
      - name: Terraform Init
        run: |
          terraform init \
          -backend-config="resource_group_name=${{ secrets.TF_STATE_RESOURCE_GROUP }}" \
          -backend-config="storage_account_name=${{ secrets.TF_STATE_STORAGE_ACCOUNT }}" \
          -backend-config="container_name=${{ secrets.TF_STATE_CONTAINER }}" \
          -backend-config="key=${{ secrets.TF_STATE_KEY }}" \
          -backend-config="access_key=${{ secrets.TF_STATE_ACCESS_KEY }}"
        working-directory: ${{ env.INFRASTRUCTURE_TERRAFORM_DIR }}

      # Paso 6: Aplicar la infraestructura usando el archivo de plan
      - name: Terraform Apply
        run: terraform apply -input=false tfplan
        working-directory: ${{ env.INFRASTRUCTURE_TERRAFORM_DIR }}

  # ===============================================================================
  # ETAPA 3: DESENCADENAR PIPELINES
  # ===============================================================================
  dispatch_microservices:
    name: '3. Desencadenar Pipelines de Microservicios'
    needs: apply_base
    if: success()
    runs-on: ubuntu-latest

    steps:
      # Paso 1: Ejecutar los pipelines de desarrollo
      - name: Trigger pipelines in microservices
        run: |
          echo "üöÄ Disparando workflows en microservicios..."

          repos=(
            "MicroTodoSuite/microservice-app-users-api"
            "MicroTodoSuite/microservice-app-todos-api"
            "MicroTodoSuite/microservice-app-auth-api"
            "MicroTodoSuite/microservice-app-log-message-processor"
            "MicroTodoSuite/microservice-app-prometheus"
            "MicroTodoSuite/microservice-app-frontend"
          )

          for repo in "${repos[@]}"; do
            echo "‚û°Ô∏è Disparando workflow en $repo"

            curl -X POST \
              -H "Accept: application/vnd.github.v3+json" \
              -H "Authorization: Bearer ${{ env.GH_TOKEN }}" \
              https://api.github.com/repos/$repo/dispatches \
              -d '{"event_type":"infra-completed"}'
          done

      # Paso 2: Instalar dependencia para procesar JSON
      - name: Install jq
        run: sudo apt-get install -y jq

      # Paso 3: Verificar si ya terminaron los pipelines de desarrollo
      - name: Verify completed pipelines in microservices
        run: |
          echo "üîç Iniciando verificaci√≥n de workflows..."
          
          # Lista de repositorios
          repos=(
            "MicroTodoSuite/microservice-app-users-api"
            "MicroTodoSuite/microservice-app-todos-api"
            "MicroTodoSuite/microservice-app-auth-api"
            "MicroTodoSuite/microservice-app-log-message-processor"
            "MicroTodoSuite/microservice-app-prometheus"
            "MicroTodoSuite/microservice-app-frontend"
          )

          max_wait_minutes=30
          interval_seconds=30
          end_time=$(( $(date +%s) + (max_wait_minutes * 60) ))
          
          while [ $(date +%s) -lt $end_time ]; do
            all_done=true
            pending_repos=""
            
            for repo in "${repos[@]}"; do
              echo "üì° Consultando estado para $repo"
              
              if ! response=$(curl -s -f \
                -H "Accept: application/vnd.github.v3+json" \
                -H "Authorization: Bearer $GH_TOKEN" \
                "https://api.github.com/repos/$repo/actions/runs?event=repository_dispatch&event_type=infra-completed&per_page=1"); then
                
                echo "‚ö†Ô∏è Error al consultar $repo"
                all_done=false
                pending_repos+=" $repo"
                continue
              fi

              status=$(echo "$response" | jq -r '.workflow_runs[0].status // "unknown"')
              conclusion=$(echo "$response" | jq -r '.workflow_runs[0].conclusion // "unknown"')
              
              printf "   %-45s: Status=%-10s Conclusion=%-10s\n" "$repo" "$status" "$conclusion"
              
              if [ "$status" != "completed" ] || [ "$conclusion" != "success" ]; then
                all_done=false
                pending_repos+=" $repo"
              fi
            done

            if [ "$all_done" = true ]; then
              echo -e "\nüéâ Todos los microservicios han completado sus pipelines exitosamente!"
              exit 0
            fi

            echo -e "\n‚è≥ Repositorios pendientes:$pending_repos"
            echo "‚åõ Volviendo a verificar en $interval_seconds segundos..."
            sleep $interval_seconds
          done

          echo -e "\n‚ùå Error: Tiempo de espera agotado ($max_wait_minutes minutos)"
          echo "Los siguientes repositorios no completaron sus pipelines:"
          echo "$pending_repos"
          exit 1
