name: Infrastructure Pipeline

# ===============================================================================
# CONFIGURACI√ìN B√ÅSICA DEL PIPELINE DE INFRAESTRUCTURA
# ===============================================================================

# Este pipeline se ejecutar√° autom√°ticamente cuando:
# - Se realicen cambios en la rama 'main'
# - Y los cambios afecten archivos dentro de los directorios 'base-infrastructure/*', 'container-apps/'
on:
  pull_request:
    branches:
      - main
  workflow_run:
    workflows: ['Setup Terraform Backend']
    types:
      - completed # Se ejecuta cuando se completa el pipeline del backend

# Variables reutilizables a lo largo del workflow
env:
  INFRASTRUCTURE_TERRAFORM_DIR: 'base-infrastructure' # Carpeta donde est√°n los archivos .tf de la base de la infraestructrua
  CONTAINERS_TERRAFORM_DIR: 'container-apps' # Carpeta donde est√°n los archivos .tf de la base de la infraestructrua
  AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS_COLONIA }} # Credenciales de Azure configuradas en GitHub Secrets
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID_COLONIA }} # ID de la suscripci√≥n de Azure configuradas en GitHub Secrets
  GITHUB_REPOSITORY: 'MicroTodoSuite/microservice-app-ops' # Repositorio de operaciones
  GH_TOKEN: ${{ secrets.GH_TOKEN }} # Github token con los permisos necesarios

jobs:
  # ===============================================================================
  # ETAPA 1: VALIDACI√ìN DE INFRAESTRUCTURA BASE
  # ===============================================================================
  validate_base:
    name: '1. Validaci√≥n de Infraestructura Base'
    runs-on: ubuntu-latest

    steps:
      # Paso 1: Checkout del c√≥digo
      - name: Checkout repository
        uses: actions/checkout@v4

      # Paso 2: Configurar Azure CLI
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ env.AZURE_CREDENTIALS }}

      # Paso 3: Instalar Terraform
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      # Paso 4: Ejecutar script para configurar secrets
      - name: Setup Azure Secrets
        run: |
          echo "‚öôÔ∏è Configurando secrets de Azure..."
          chmod +x ./scripts/setup-azure-secrets.sh
          ./scripts/setup-azure-secrets.sh

      # Paso 5: Inicializar Terraform con backend
      - name: Terraform Init
        run: |
          terraform init \
          -backend-config="resource_group_name=${{ secrets.TF_STATE_RESOURCE_GROUP }}" \
          -backend-config="storage_account_name=${{ secrets.TF_STATE_STORAGE_ACCOUNT }}" \
          -backend-config="container_name=${{ secrets.TF_STATE_CONTAINER }}" \
          -backend-config="key=${{ secrets.TF_STATE_BASE_INFRASTRUCTURE_KEY }}" \
          -backend-config="access_key=${{ secrets.TF_STATE_ACCESS_KEY }}"
        working-directory: ${{ env.INFRASTRUCTURE_TERRAFORM_DIR }}

      # Paso 6: Validar la sintaxis de los archivos Terraform
      - name: Terraform Validate
        run: terraform validate
        working-directory: ${{ env.INFRASTRUCTURE_TERRAFORM_DIR }}

      # Paso 7: Generar el plan de ejecuci√≥n
      # - Muestra los cambios que se aplicar√≠an sin ejecutarlos
      # - Guarda el plan como archivo binario `tfplan`
      - name: Terraform Plan
        run: |
          terraform plan -out=tfplan \
          -var="subscription_id=${{ env.AZURE_SUBSCRIPTION_ID }}" \
          -var="location=${{ secrets.AZURE_LOCATION }}" \
          -var="resource_group_name=${{ secrets.AZURE_RESOURCE_GROUP_NAME }}" \
          -var="acr_name=${{ secrets.ACR_NAME }}" \
          -var="acr_sku=${{ secrets.ACR_SKU }}" \
          -var="acr_admin_enabled=${{ secrets.ACR_ADMIN_ENABLED }}" \
          -var="container_apps_environment_name=${{ secrets.CONTAINER_APPS_ENVIRONMENT_NAME }}" \
          -var="jwt_secret=${{ secrets.JWT_SECRET }}" \
          -var='standard_tags=${{ secrets.STANDARD_TAGS }}'

        working-directory: ${{ env.INFRASTRUCTURE_TERRAFORM_DIR }}

      # Paso 8: Subir el archivo tfplan como artefacto
      # - Esto permite usar el mismo plan en la siguiente etapa
      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: ${{ env.INFRASTRUCTURE_TERRAFORM_DIR }}/tfplan

  # ===============================================================================
  # ETAPA 2: APLICACI√ìN DE CAMBIOS INFRAESTRUCTURA BASE EN AZURE
  # ===============================================================================
  apply_base:
    name: '2. Aplicar Infraestructura Base'
    needs: validate_base
    if: success()
    runs-on: ubuntu-latest

    steps:
      # Paso 1: Checkout del c√≥digo
      - name: Checkout repository
        uses: actions/checkout@v4

      # Paso 2: Configurar Azure CLI
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ env.AZURE_CREDENTIALS }}

      # Paso 3: Instalar Terraform
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      # Paso 4: Descargar el artefacto tfplan generado anteriormente
      - name: Download Terraform Plan
        uses: actions/download-artifact@v4
        with:
          name: terraform-plan
          path: ${{ env.INFRASTRUCTURE_TERRAFORM_DIR }}

      # Paso 5: Inicializar Terraform en esta etapa tambi√©n con backend
      - name: Terraform Init
        run: |
          terraform init \
          -backend-config="resource_group_name=${{ secrets.TF_STATE_RESOURCE_GROUP }}" \
          -backend-config="storage_account_name=${{ secrets.TF_STATE_STORAGE_ACCOUNT }}" \
          -backend-config="container_name=${{ secrets.TF_STATE_CONTAINER }}" \
          -backend-config="key=${{ secrets.TF_STATE_BASE_INFRASTRUCTURE_KEY }}" \
          -backend-config="access_key=${{ secrets.TF_STATE_ACCESS_KEY }}"
        working-directory: ${{ env.INFRASTRUCTURE_TERRAFORM_DIR }}

      # Paso 6: Aplicar la infraestructura usando el archivo de plan
      - name: Terraform Apply
        run: terraform apply -input=false tfplan
        working-directory: ${{ env.INFRASTRUCTURE_TERRAFORM_DIR }}

  # ===============================================================================
  # ETAPA 3: DESENCADENAR PIPELINES
  # ===============================================================================
  dispatch_microservices:
    name: '3. Desencadenar Pipelines de Microservicios'
    needs: apply_base
    if: success()
    runs-on: ubuntu-latest

    steps:
      # Paso 1: Ejecutar los pipelines de desarrollo
      - name: Trigger pipelines in microservices
        run: |
          echo "üöÄ Disparando workflows en microservicios..."

          repos=(
            "MicroTodoSuite/microservice-app-users-api"
            "MicroTodoSuite/microservice-app-todos-api"
            "MicroTodoSuite/microservice-app-auth-api"
            "MicroTodoSuite/microservice-app-log-message-processor"
            "MicroTodoSuite/microservice-app-prometheus"
            "MicroTodoSuite/microservice-app-frontend"
          )

          for repo in "${repos[@]}"; do
            echo "‚û°Ô∏è Disparando workflow en $repo"

            curl -X POST \
              -H "Accept: application/vnd.github.v3+json" \
              -H "Authorization: Bearer ${{ env.GH_TOKEN }}" \
              https://api.github.com/repos/$repo/dispatches \
              -d '{"event_type":"infra-completed"}'
          done

      # Paso 2: Instalar dependencia para procesar JSON
      - name: Install jq
        run:
          sudo apt-get install -y jq

          # Paso 3: Verificar si ya terminaron los pipelines de desarrollo
      - name: Verify completed pipelines in microservices
        run: |
          echo "üîç Iniciando verificaci√≥n de workflows..."

          # Lista de repositorios
          repos=(
            "MicroTodoSuite/microservice-app-users-api"
            "MicroTodoSuite/microservice-app-todos-api"
            "MicroTodoSuite/microservice-app-auth-api"
            "MicroTodoSuite/microservice-app-log-message-processor"
            "MicroTodoSuite/microservice-app-prometheus"
            "MicroTodoSuite/microservice-app-frontend"
          )

          max_wait_minutes=30
          interval_seconds=30
          end_time=$(( $(date +%s) + (max_wait_minutes * 60) ))

          while [ $(date +%s) -lt $end_time ]; do
            all_done=true
            pending_repos=""
            failed_repos=""
            
            for repo in "${repos[@]}"; do
              echo "üì° Consultando estado para $repo"
              
              if ! response=$(curl -s -f \
                -H "Accept: application/vnd.github.v3+json" \
                -H "Authorization: Bearer $GH_TOKEN" \
                "https://api.github.com/repos/$repo/actions/runs?event=repository_dispatch&event_type=infra-completed&per_page=1"); then
                
                echo "‚ö†Ô∏è Error al consultar $repo"
                all_done=false
                pending_repos+=" $repo"
                continue
              fi

              status=$(echo "$response" | jq -r '.workflow_runs[0].status // "unknown"')
              conclusion=$(echo "$response" | jq -r '.workflow_runs[0].conclusion // "unknown"')
              
              printf "   %-45s: Status=%-10s Conclusion=%-10s\n" "$repo" "$status" "$conclusion"
              
              # Si el status es 'failed' o la conclusi√≥n es 'failure', abortar inmediatamente
              if [ "$status" = "failed" ] || [ "$conclusion" = "failure" ]; then
                echo -e "\n‚ùå Error cr√≠tico: El repositorio $repo fall√≥ (Status=$status, Conclusion=$conclusion)"
                echo "üö® Abortando el pipeline debido a fallo en microservicios..."
                exit 1
              fi
              
              if [ "$status" != "completed" ] || [ "$conclusion" != "success" ]; then
                all_done=false
                pending_repos+=" $repo"
              fi
            done

            if [ "$all_done" = true ]; then
              echo -e "\nüéâ Todos los microservicios han completado sus pipelines exitosamente!"
              exit 0
            fi

            echo -e "\n‚è≥ Repositorios pendientes:$pending_repos"
            echo "‚åõ Volviendo a verificar en $interval_seconds segundos..."
            sleep $interval_seconds
          done

          echo -e "\n‚ùå Error: Tiempo de espera agotado ($max_wait_minutes minutos)"
          echo "Los siguientes repositorios no completaron sus pipelines:"
          echo "$pending_repos"
          exit 1

  # ===============================================================================
  # ETAPA 4: VALIDACI√ìN DE INFRAESTRUCTURA CONTENEDORES
  # ===============================================================================
  validate_container:
    name: '4. Validaci√≥n de Infraestructura Contenedores'
    needs: dispatch_microservices
    if: success()
    runs-on: ubuntu-latest

    steps:
      # Paso 1: Checkout del c√≥digo
      - name: Checkout repository
        uses: actions/checkout@v4

      # Paso 2: Configurar Azure CLI
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ env.AZURE_CREDENTIALS }}

      # Paso 3: Instalar Terraform
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      # Paso 4: Inicializar Terraform con backend
      - name: Terraform Init
        run: |
          terraform init \
          -backend-config="resource_group_name=${{ secrets.TF_STATE_RESOURCE_GROUP }}" \
          -backend-config="storage_account_name=${{ secrets.TF_STATE_STORAGE_ACCOUNT }}" \
          -backend-config="container_name=${{ secrets.TF_STATE_CONTAINER }}" \
          -backend-config="key=${{ secrets.TF_STATE_CONTAINER_APPS_KEY }}" \
          -backend-config="access_key=${{ secrets.TF_STATE_ACCESS_KEY }}"
        working-directory: ${{ env.CONTAINERS_TERRAFORM_DIR }}

      # Paso 5: Validar la sintaxis de los archivos Terraform
      - name: Terraform Validate
        run: terraform validate
        working-directory: ${{ env.CONTAINERS_TERRAFORM_DIR }}

      # Paso 7: Generar el plan de ejecuci√≥n
      # - Muestra los cambios que se aplicar√≠an sin ejecutarlos
      # - Guarda el plan como archivo binario `tfplan`
      - name: Terraform Plan
        run: |
          terraform plan -out=tfplan \
          -var="subscription_id=${{ env.AZURE_SUBSCRIPTION_ID }}" \
          -var="location=${{ secrets.AZURE_LOCATION }}" \
          -var="resource_group_name=${{ secrets.AZURE_RESOURCE_GROUP_NAME }}" \
          -var="acr_name=${{ secrets.ACR_NAME }}" \
          -var="acr_sku=${{ secrets.ACR_SKU }}" \
          -var="acr_admin_enabled=${{ secrets.ACR_ADMIN_ENABLED }}" \
          -var="container_apps_environment_name=${{ secrets.CONTAINER_APPS_ENVIRONMENT_NAME }}" \
          -var="jwt_secret=${{ secrets.JWT_SECRET }}" \
          -var='standard_tags=${{ secrets.STANDARD_TAGS }}'
        working-directory: ${{ env.CONTAINERS_TERRAFORM_DIR }}

      # Paso 8: Subir el archivo tfplan como artefacto
      # - Esto permite usar el mismo plan en la siguiente etapa
      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: ${{ env.CONTAINERS_TERRAFORM_DIR }}/tfplan

  # ===============================================================================
  # ETAPA 5: APLICACI√ìN DE CAMBIOS INFRAESTRUCTURA EN AZURE
  # ===============================================================================
  apply_container:
    name: '5. Aplicar Infraestructura De Contenedores'
    needs: validate_container
    if: success()
    runs-on: ubuntu-latest

    steps:
      # Paso 1: Checkout del c√≥digo
      - name: Checkout repository
        uses: actions/checkout@v4

      # Paso 2: Configurar Azure CLI
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ env.AZURE_CREDENTIALS }}

      # Paso 3: Instalar Terraform
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      # Paso 4: Descargar el artefacto tfplan generado anteriormente
      - name: Download Terraform Plan
        uses: actions/download-artifact@v4
        with:
          name: terraform-plan
          path: ${{ env.CONTAINERS_TERRAFORM_DIR }}

      # Paso 5: Inicializar Terraform en esta etapa tambi√©n con backend
      - name: Terraform Init
        run: |
          terraform init \
          -backend-config="resource_group_name=${{ secrets.TF_STATE_RESOURCE_GROUP }}" \
          -backend-config="storage_account_name=${{ secrets.TF_STATE_STORAGE_ACCOUNT }}" \
          -backend-config="container_name=${{ secrets.TF_STATE_CONTAINER }}" \
          -backend-config="key=${{ secrets.TF_STATE_BASE_INFRASTRUCTURE_KEY }}" \
          -backend-config="access_key=${{ secrets.TF_STATE_CONTAINER_APPS_KEY }}"
        working-directory: ${{ env.CONTAINERS_TERRAFORM_DIR }}

      # Paso 6: Aplicar la infraestructura usando el archivo de plan
      - name: Terraform Apply
        run: terraform apply -input=false tfplan
        working-directory: ${{ env.CONTAINERS_TERRAFORM_DIR }}

  # ===============================================================================
  # ETAPA 6: CONFIGURACI√ìN DE RESILIENCIA
  # ===============================================================================
  configure_resiliency:
    name: '6. Configuraci√≥n de Resiliencia'
    needs: apply_container
    if: success()
    runs-on: ubuntu-latest

    steps:
      # Paso 1: Checkout del c√≥digo
      - name: Checkout repository
        uses: actions/checkout@v4

      # Paso 2: Configurar Azure CLI
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ env.AZURE_CREDENTIALS }}

      # Paso 3: Instalar/actualizar extensi√≥n containerapp
      - name: Setup Azure CLI extensions
        run: |
          # Configurar para permitir extensiones preview
          az config set extension.use_dynamic_install=yes_without_prompt
          az config set extension.dynamic_install_allow_preview=true

          # Instalar/actualizar extensi√≥n containerapp
          az extension add --name containerapp --upgrade --yes

          # Verificar versi√≥n instalada
          az version

      # Paso 4: Configurar pol√≠ticas de resiliencia para cada servicio
      - name: Configure resiliency policies for all Container Apps
        run: |
          echo "üîç Obteniendo todos los Container Apps del grupo ${{ secrets.AZURE_RESOURCE_GROUP_NAME }}..."
          SERVICES=$(az containerapp list --resource-group ${{ secrets.AZURE_RESOURCE_GROUP_NAME }} --subscription ${{ env.AZURE_SUBSCRIPTION_ID }} --query "[].name" -o tsv)

          for SERVICE in $SERVICES; do
            echo "üîß Configurando resiliencia para $SERVICE..."

            # Limpiar y generar nombre base
            CLEAN_NAME=$(echo "$SERVICE" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9-]//g' | sed 's/--*/-/g' | sed 's/^-//' | sed 's/-$//')
            BASE_NAME="${CLEAN_NAME}-resiliency"

            # Asegurar que el nombre tenga m√°ximo 30 caracteres
            POLICY_NAME=$(echo "$BASE_NAME" | cut -c1-30 | sed 's/-$//')

            echo "üìõ Nombre de pol√≠tica generado: $POLICY_NAME"

            # Verificar si la pol√≠tica ya existe
            if az containerapp resiliency show \
              --resource-group ${{ secrets.AZURE_RESOURCE_GROUP_NAME }} \
              --name "$POLICY_NAME" \
              --container-app-name $SERVICE \
              --subscription ${{ env.AZURE_SUBSCRIPTION_ID }} &>/dev/null; then

              echo "üîÑ Actualizando pol√≠tica existente para $SERVICE..."
              az containerapp resiliency update \
                --resource-group ${{ secrets.AZURE_RESOURCE_GROUP_NAME }} \
                --name "$POLICY_NAME" \
                --container-app-name $SERVICE \
                --recommended \
                --subscription ${{ env.AZURE_SUBSCRIPTION_ID }}
            else
              echo "üÜï Creando nueva pol√≠tica para $SERVICE..."
              az containerapp resiliency create \
                --resource-group ${{ secrets.AZURE_RESOURCE_GROUP_NAME }} \
                --name "$POLICY_NAME" \
                --container-app-name $SERVICE \
                --recommended \
                --subscription ${{ env.AZURE_SUBSCRIPTION_ID }}
            fi

            echo "‚úÖ Configuraci√≥n aplicada para $SERVICE:"
            az containerapp resiliency show \
              --resource-group ${{ secrets.AZURE_RESOURCE_GROUP_NAME }} \
              --name "$POLICY_NAME" \
              --container-app-name $SERVICE \
              --subscription ${{ env.AZURE_SUBSCRIPTION_ID }} \
              --output table

            echo "-------------------------------------------"
          done
