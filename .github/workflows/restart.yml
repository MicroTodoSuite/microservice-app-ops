name: Restart Pipeline 

# =======================================================
# REINICIO DE LOS CONTENEDORES
# =======================================================

# Este pipeline se ejecuta manualmente desde la pesta√±a 'Actions' en GitHub
on:
  workflow_dispatch: # Activaci√≥n manual

# Variables reutilizables a lo largo del workflow
env:
  RESOURCE_GROUP: 'microservice-app-rg' # Grupo de recursos de Azure donde est√°n desplegadas las Container Apps
  ACR_NAME: 'gacomicroserviceappacr.azurecr.io' # Nombre completo del Azure Container Registry (ACR)
  AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS_COLONIA }} # Credenciales de Azure configuradas en GitHub Secrets
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID_COLONIA }} # ID de la suscripci√≥n de Azure configuradas en GitHub Secrets

jobs:
  # ==============================================
  # ETAPA 1: DESPLEGAR DE NUEVO LOS CONTENEDORES
  # ==============================================
  deploy_apps_in_order:
    name: 'Despliegue ordenado de Container Apps'
    runs-on: ubuntu-latest

    steps:
      # Paso 1: Checkout del repositorio
      - name: Checkout repository
        uses: actions/checkout@v4

      # Paso 2: Login en Azure
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ env.AZURE_CREDENTIALS }}

      # Paso 3: Instalar extensi√≥n containerapp
      - name: Setup Azure CLI extensions
        run: |
          az config set extension.use_dynamic_install=yes_without_prompt
          az config set extension.dynamic_install_allow_preview=true
          az extension add --name containerapp --upgrade --yes

      # Paso 4: Despliegue ordenado de los servicios
      - name: Deploy apps in order
        run: |
          # Lista de apps en orden
          apps=(
            "zipkin"
            "redis"
            "users-api"
            "auth-api"
            "todos-api"
            "log-message-processor"
            "frontend"
            "frontend-exporter"
            "prometheus"
            "grafana"
          )

          # Im√°genes espec√≠ficas para ciertos servicios
          declare -A special_images=(
            ["zipkin"]="openzipkin/zipkin:latest"
            ["redis"]="redis:7.0-alpine"
            ["frontend-exporter"]="nginx/nginx-prometheus-exporter:latest"
            ["grafana"]="grafana/grafana:latest"
          )

          echo "üöÄ Iniciando despliegue ordenado de Azure Container Apps..."

          for app in "${apps[@]}"; do
            echo "üîÑ Procesando Container App: $app"
            
            # Determinar qu√© imagen usar
            if [[ -n "${special_images[$app]}" ]]; then
              image="${special_images[$app]}"
              echo "‚ÑπÔ∏è Usando imagen especial para $app: $image"
            else
              image="$ACR_NAME/$app:latest"
              echo "‚ÑπÔ∏è Usando imagen del ACR para $app: $image"
            fi

            # Actualizar la Container App con la imagen correcta
            echo "üöÄ Actualizando $app..."
            az containerapp update \
              --name $app \
              --resource-group $RESOURCE_GROUP \
              --image "$image" \
              --subscription $AZURE_SUBSCRIPTION_ID

            # Reiniciar la revisi√≥n
            echo "üîÑ Reiniciando container de $app..."
            revision=$(az containerapp show \
              --name $app \
              --resource-group $RESOURCE_GROUP \
              --subscription $AZURE_SUBSCRIPTION_ID \
              --query "properties.latestReadyRevisionName" \
              --output tsv)

            if [[ -n "$revision" ]]; then
              az containerapp revision restart \
                --name $app \
                --resource-group $RESOURCE_GROUP \
                --revision $revision \
                --subscription $AZURE_SUBSCRIPTION_ID
            else
              echo "‚ö†Ô∏è No se encontr√≥ revisi√≥n lista para $app, omitiendo reinicio"
            fi

            echo "‚úÖ $app actualizado correctamente"
            echo "-------------------------------------------"
          done

          echo "üéâ Todos los servicios han sido actualizados exitosamente"
